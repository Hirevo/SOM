"
Copyright (c) 2001-2013 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

StringTest = (

    "The 'run' method is called when initializing the system"
    run: harness = ( 
        |str1 str2 str3|
        
        25 sqrt = 5 ifFalse: [
            harness
                fail: self
                because: '25 sqrt should be equal to 5.' ].
        
        
        "test equality (true, false, true)"
        str1 := 'foo'.
        str2 := 'bar'.
        
        (str1 = str1) ifFalse: [ harness fail: self because: 'Equality should be given for the same object.'].
        (str1 = str2) ifTrue:  [ harness fail: self because: 'String foo and bar should not be equal.'].
        (str2 = str2) ifFalse: [ harness fail: self because: 'Equality should be given for the same object.'].
        
        "test length (6)"
        str3 := str1 + str2.
        str3 length = 6 ifFalse: [ harness fail: self because: 'The concatenated string should be 6 elements long.' ].
        
        "test charAt"
        (str3 charAt: 1) = 'f' ifFalse: [
			harness fail: self because: '#beginsWith: gives wrong result, expected: f'].
        (str3 charAt: 2) = 'o' ifFalse: [
			harness fail: self because: '#beginsWith: gives wrong result, expected: o'].
        (str3 charAt: 3) = 'o' ifFalse: [
			harness fail: self because: '#beginsWith: gives wrong result, expected: o'].
        (str3 charAt: 4) = 'b' ifFalse: [
			harness fail: self because: '#beginsWith: gives wrong result, expected: b'].
        (str3 charAt: 5) = 'a' ifFalse: [
			harness fail: self because: '#beginsWith: gives wrong result, expected: a'].
		(str3 charAt: 6) = 'r' ifFalse: [
			harness fail: self because: '#beginsWith: gives wrong result, expected: r'].

        "test substring. 'foo' , 'bar' , 'foobar'" 
        (str3 primSubstringFrom: 1 to: 3) = 'foo' ifFalse: [
            harness fail: self because: '#primSubstringFrom:to: was expected to return foo.'].
        (str3 primSubstringFrom: 4 to: 6)  = 'bar' ifFalse: [
            harness fail: self because: '#primSubstringFrom:to: was expected to return bar.'].
        (str3 primSubstringFrom: 1 to: 6)  = 'foobar' ifFalse: [
            harness fail: self because: '#primSubstringFrom:to: was expected to return foobar.'].
    
		(str1 beginsWith: 'oo') ifTrue: [
            harness fail: self because: '#beginsWith: gives wrong result (case 1)'].
        (str1 beginsWith: 'foo') ifFalse: [
            harness fail: self because: '#beginsWith: gives wrong result (case 2)'].
        
        (str3 substringFrom: 2 to: 4) = 'oob' ifFalse: [
            harness fail: self because: '#substringFrom:to: gives wrong result'].
	)
    
)
