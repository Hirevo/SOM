"

$Id: CompilerReturnTest.som 30 2009-07-31 12:20:25Z michael.haupt $

Copyright (c) 2009-2013 see AUTHORS file
Software Architecture Group, Hasso Plattner Institute, Potsdam, Germany
http://www.hpi.uni-potsdam.de/swa/

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"

CompilerReturnTest = (

    test1 = ( ^self )
    test2 = (       )
    
    test3: arg = ( ^self )
    test4: arg = (       )
    
    run: harness = (
        self testIfTrue: harness.
    
        self test1 == self
            ifFalse: [
                harness
                    fail: self
                    because: 'Method test1 did not return self.' ].
        self test2 == self
            ifFalse: [
                harness
                    fail: self
                    because: 'Method test2 did not return self.' ].
        (self test3: 23) == self
            ifFalse: [
                harness
                    fail: self
                    because: 'Method test3 did not return self.' ].
        (self test4: 23) == self
            ifFalse: [
                harness
                    fail: self
                    because: 'Method test4 did not return self.' ]
    )
    
    "In SOM++, code after the #ifTrue: does not seem to be executed, if the
     block expression ends with a dot."
    testIfTrue: harness = (
        | arr |
        arr := Array new: 3.
        self usesIfTrueWithDot: arr.
        (arr at: 1) = 1 ifFalse: [ harness fail: self because: 'usesIfTrueWithDot method was not executed'].
        (arr at: 2) = 2 ifFalse: [ harness fail: self because: 'usesIfTrueWithDot ifTrue was not executed'].
        (arr at: 3) = 3 ifFalse: [ harness fail: self because: 'usesIfTrueWithDot remainder was not executed'].
        
        arr := Array new: 3.
        self usesIfTrueWithoutDot: arr.
        (arr at: 1) = 1 ifFalse: [ harness fail: self because: 'usesIfTrueWithoutDot method was not executed'].
        (arr at: 2) = 2 ifFalse: [ harness fail: self because: 'usesIfTrueWithoutDot ifTrue was not executed'].
        (arr at: 3) = 3 ifFalse: [ harness fail: self because: 'usesIfTrueWithoutDot remainder was not executed'].
        
        arr := Array new: 3.
        self usesIfFalseWithDot: arr.
        (arr at: 1) = 1 ifFalse: [ harness fail: self because: 'usesIfFalseWithDot method was not executed'].
        (arr at: 2) = 2 ifFalse: [ harness fail: self because: 'usesIfFalseWithDot ifTrue was not executed'].
        (arr at: 3) = 3 ifFalse: [ harness fail: self because: 'usesIfFalseWithDot remainder was not executed'].
        
        arr := Array new: 3.
        self usesIfFalseWithoutDot: arr.
        (arr at: 1) = 1 ifFalse: [ harness fail: self because: 'usesIfFalseWithoutDot method was not executed'].
        (arr at: 2) = 2 ifFalse: [ harness fail: self because: 'usesIfFalseWithoutDot ifTrue was not executed'].
        (arr at: 3) = 3 ifFalse: [ harness fail: self because: 'usesIfFalseWithoutDot remainder was not executed'].
    )
    
    usesIfTrueWithDot: arr = (
        arr at: 1 put: 1.
        (3 >= 1) ifTrue: [arr at: 2 put: 2. "WITH DOT"].
        arr at: 3 put: 3.
    )
    
    usesIfTrueWithoutDot: arr = (
        arr at: 1 put: 1.
        (3 >= 1) ifTrue: [arr at: 2 put: 2 "WITHOUT DOT"].
        arr at: 3 put: 3.
    )
    
    usesIfFalseWithDot: arr = (
        arr at: 1 put: 1.
        (3 >= 1) ifTrue: [arr at: 2 put: 2. "WITH DOT"].
        arr at: 3 put: 3.
    )
    
    usesIfFalseWithoutDot: arr = (
        arr at: 1 put: 1.
        (3 >= 1) ifTrue: [arr at: 2 put: 2 "WITHOUT DOT"].
        arr at: 3 put: 3.
    )
)
