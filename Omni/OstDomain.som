OstDomain = (
    "OstDomain is the root class for all Omni Domain definitions."
    | domainForNewObjects |
    
    initialize = (
        domainForNewObjects := self domainForNewObjects.
    )
    
    adoptObject: obj = ( "returns obj"
        ^ OstMirror setDomainOf: obj to: self.
    )
    
    domainForNewObjects = (
        "#basicNew needs to determine which domain a new object is supposed
         to belong to.
         The standard domain is self, the domain of the currently executing
         process.

         If this method is overriden, make sure that you do not allocate any objects here!!!!!!"
        ^ self
    )
    
    evaluateInContext: aBlock = unenforced (
        ^ OstMirror evaluate: aBlock in: self
    )

    evaluateEnforced: aBlock = unenforced (
        ^ OstMirror evaluate: aBlock enforcedIn: self
    )

    newProcessFor: aBlock = (
        "Answer a Process running the code in aBlock in this domain.
         The process is not scheduled."
        "| ctx proc |
        <primitive: 19>" "Simulation guard"
        "ctx := [aBlock value.
                Processor terminateActive] asContext.
        proc := Process
            forContext: ctx
            priority: Processor activePriority.

        OstMirror setDomainOf: ctx to: self.
        OstMirror setDomainOf: proc to: self.
        ^ proc."
    )

    spawnHere: aBlock = (
        "Spawn the given block as a process in this domain" 
        ^ (self newProcessFor: aBlock) resume
    )

"    primAt: idx on: anObj = unenforced (
        ^ anObj at: idx
    )

    primAt: idx on: anObj put: aVal = unenforced (
        ^ anObj at: idx put: aVal
    )

    primBasicAt: idx on: anObj = unenforced (
        ^ anObj basicAt: idx
    )

    primBasicAt: idx on: anObj put: aVal = unenforced (
        ^ anObj basicAt: idx put: aVal
    )"

    priminstVarAt: idx on: anObj = unenforced (
        ^ anObj instVarAt: idx
    )

    priminstVarAt: idx put: aVal on: anObj = unenforced (
        ^ anObj instVarAt: idx put: aVal
    )

"    primShallowCopy: anObj = unenforced (
        ^ anObj shallowCopy
    )"
    
    readField: idx of: obj = unenforced (
        ^ obj instVarAt: idx
    )

    readLiteral: literal = unenforced (
        ^ literal value
    )


    requestExecutionOf: aSelector with: argArray on: anObject = unenforced (
        ^ anObject performEnforced: aSelector withArguments: argArray
    )

    requestExecutionOf: aSelector with: argArray on: anObject lookup: cls = unenforced (
        ^ anObject performEnforced: aSelector withArguments: argArray inSuperclass: cls.
    )

    write: val toField: idx of: obj = unenforced (
        ^ obj instVarAt: idx put: val.
    )

    write: val toLiteral: literal = unenforced (
        "All globals are literals, and we treat all literals equal in the VM"
        literal value: val.
        ^ val
    )

    ----
    
    new = (
        | o |
        o := super new.
        o initialize.
        ^ o
    )

    currentDomain = unenforced (
        ^ OstMirror currentDomain
    )

    omniDomainFrom: obj = (
        ^ OstMirror domainOf: obj
    )
)
